[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mediasub"
description = "Listen media from different sources."
keywords = []
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
]
requires-python = ">=3.10"
dependencies = ["aiosqlite", "httpx"]
dynamic = ["version", "readme"]

[dependency-groups]
dev = [
    { include-group = "lint" },
    # { include-group = "tox" },
    # { include-group = "tests" },
]
# tests = [  #
#     "pytest<8",
#     "pytest-coverage",
#     "pytest-cases",
#     "pytest-lazy-fixtures"
# ]
lint = ["pyright", "ruff"]
# tox = ["tox", "tox-uv"]

[tool.setuptools.dynamic]
version = { attr = "mediasub.__version__" }
readme = { file = ["README.md"] }

[tool.setuptools]
packages = ["mediasub"]

[tool.setuptools.package-data]
mediasub = ["py.typed"]

[tool.pyright]
typeCheckingMode = "strict"
include = ["mediasub"]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py310"
src = ["mediasub"]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle Error
    "F",     # pyflakes
    "UP",    # pyupgrade
    "SIM",   # flake8-simplify
    "I",     # imports
    "S",     # bandit (security)
    "N",     # pep8-naming
    "ASYNC", # flake8-async
    "C4",    # flake8-compehensions
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "PIE",   # flake8-pie
    "PYI",   # flake8-pyi
    "RSE",   # flake8-raise
    "SLOT",  # flake8-slots
    "INT",   # flake8-gettext
    "TRY",   # tryceratops
    "FLY",   # flynt
    "PERF",  # Perflint
    "FURB",  # refurb
    "LOG",   # flake8-logging
    "RUF",   # Ruff-specific-rules
    # "ERA",   # locate commented codes
    # "FIX",   # locate TODOs and FIXME
    # "PTH",   # flake8-use-pathlib (maybe todo ?)
    # "TID",   # flake8-tidy-imports (maybe todo ?)
    # "SLF",   # flake8-self  (managed by pyright)
    # "RET",   # flake8-return
    # "Q",     # flake8-quotes
    # "T20",   # flake8-print
    # "DTZ",   # flake8-datetimez (TODO)
    # "B",     # flake8-bugbear
]
ignore = [
    "E501",   # line too long (we relate on the formater)
    "N818",   # Error suffix for exceptions names
    "PIE796", # Enum contains duplicate value
    "TRY003", # Avoid specifying long messages outsides the exception class
    "ISC001", # To avoid conflicts with the formatter
]
dummy-variable-rgx = '^\*{0,2}(_$|__$|unused_|dummy_)'

[tool.ruff.lint.extend-per-file-ignores]
"test/**/*.py" = [
    "S101", # asserts allowed in tests...
    "ARG",  # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT",  # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()

    "PLR2004", # Magic value used in comparison, ...
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S105",    # Possible hardcoded password
    "S106",    # Possible hardcoded password
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.lint.isort]
combine-as-imports = true
